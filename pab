#!/usr/bin/python
#
# This file is part of plinth-app-bootstrapper
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
"""
Script to quickly bootstrap a new plinth app
"""


import os
import cfg
import string
import argparse
import subprocess


CURR_DIR = "/".join(os.path.realpath(cfg.__file__).split("/")[:-1])

def parse_arguments():
    """ Return parsed command line arguments as dictionary. """
    parser = argparse.ArgumentParser(
        description='Script to quickly bootstrap a new plinth app',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument(
        '--app', help="Name of the new app")
    parser.add_argument(
        '--plinth-home',
        default=cfg.plinth_home,
        help="Location of Plinth's repository")
    arguments = parser.parse_args()
    cfg.plinth_home = arguments.plinth_home
    cfg.app = arguments.app


def create_git_branch():
    """Checkout a new git branch from master"""
    subprocess.call(['git', 'checkout', 'master'])
    subprocess.call(['git', 'checkout', '-b', cfg.app])


def enable_module():
    """Add app to enabled modules"""
    with open(os.path.join('data/etc/plinth/modules-enabled', cfg.app),
              'w') as f:
        f.write(".".join(["plinth.modules", cfg.app]))


def create_actions_file():
    """Create a new actions file"""
    actions_file = os.path.join('actions', cfg.app)
    template_file = os.path.join(CURR_DIR, 'templates', 'action')

    with open(template_file, 'r') as f:
        template = f.read()

    with open(actions_file, 'w') as f:
        f.write(string.replace(template, "$app", cfg.app))

    subprocess.call(['chmod', '+x', actions_file])


def create_django_app():
    """Create a new django app for the new plinth app"""
    django_app_dir = os.path.join("plinth" , "modules", cfg.app)
    os.path.exists(django_app_dir) or os.makedirs(django_app_dir)

    module_path = os.path.join(CURR_DIR, "templates", "module")

    for fil in os.listdir(module_path):
        with open(os.path.join(module_path, fil), 'r') as f:
            template = f.read()

        with open(os.path.join(django_app_dir, fil), 'w') as f:
            f.write(string.replace(template, "$app", cfg.app))



def create_apache_config():
    """Create apache configuration"""
    path = os.path.join(cfg.plinth_home, 'data/etc/apache2/conf-available',
                        "{}-plinth.conf".format(cfg.app))
    os.path.exists(path) or subprocess.call(['touch', path])


def bootstrap():
    os.chdir(cfg.plinth_home)

    create_git_branch()

    enable_module()

    create_actions_file()

    create_django_app()

    create_apache_config()


def main():
    """Parse arguments and perform all duties."""
    parse_arguments()
    bootstrap()


if __name__ == '__main__':
    main()


